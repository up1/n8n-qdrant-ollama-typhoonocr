services:
  n8n:
    image: n8nio/n8n:latest
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - NODE_ENV=production
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n
      - TYPHOON_OCR_API_KEY=${TYPHOON_OCR_API_KEY}
      - TYPHOON_OCR_URL=http://typhoon-ocr:8000
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      - postgres
      - typhoon-ocr
    networks:
      - app-network

  postgres:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=n8n
      - POSTGRES_DB=n8n
      - POSTGRES_NON_ROOT_USER=n8n
      - POSTGRES_NON_ROOT_PASSWORD=n8n
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  ollama:
    image: ollama/ollama:latest
    restart: always
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network

  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - app-network

  typhoon-ocr:
    build:
      context: ./typhoon-ocr
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - typhoon_ocr_data:/app/data
    environment:
      - TYPHOON_OCR_API_KEY=${TYPHOON_OCR_API_KEY}
      - TYPHOON_OCR_HOST=0.0.0.0
      - TYPHOON_OCR_PORT=8000
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  n8n_data:
  postgres_data:
  ollama_data:
  qdrant_data:
  typhoon_ocr_data:
